@page "/"
@using SharpGlide.Cloud.Yandex.Readers.Profile
@using System.Threading
@using System.IO
@using System.Text.Json
@using Microsoft.AspNetCore.SignalR.Client
@using SharpGlide.WebApps.YandexDiskUploader.Hubs
@using SharpGlide.WebApps.YandexDiskUploader.Model
@using SharpGlide.WebApps.YandexDiskUploader.Parts
@using SharpGlide.WebApps.YandexDiskUploader.Service
@using SharpGlide.WebApps.YandexDiskUploader.State

@inject IProfileReader ProfileReader
@inject NavigationManager NavManager
@inject IBackgroundProcess BackgroundProcess
@inject IStateRoot StateRoot

@implements IAsyncDisposable

@if (IsConnected)
{
    <div class="alert alert-success" role="alert">
        Realtime notifications is active.
    </div>
}
else
{
    <div class="alert alert-secondary" role="alert">
        Realtime notifications is not enabled yet
    </div>
}

@if (!StateRoot.Authenticated)
{
    <h1>Hello, this is Yandex Disk File Uploader!</h1>
    <h2>Click left button to sign-in...</h2>
}
else
{
    <h1>Hello, @FirstName @LastName (@DisplayName)</h1>
    <div class="container ">
        <div class="row">
            <div class="col">
                <p>Current directory is <b>@Path.GetFileName(StateRoot.LocalFolder)</b> (@(StateRoot.LocalFolder))</p>
                <p>Source Path: </p>
                <textarea rows="2" cols="70" wrap="soft" @bind="@(StateRoot.LocalFolder)"></textarea>

                <p>Target Path: </p>
                <textarea rows="2" cols="70" wrap="soft" @bind="@(StateRoot.CloudFolder)"></textarea>
                <p>For upload please use buttons below:</p>
            </div>
        </div>
        <div class="row ">
            <div class="col">
                <span>
                    @if (BackgroundProcess.Started)
                    {
                        <button type="button" class="btn btn-primary">Started</button>
                        <button type="button" class="btn btn-outline-danger" @onclick="Stop">Stop</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-outline-primary" @onclick="Start">Start</button>
                        <button type="button" class="btn btn-danger">Stopped</button>
                    }
                </span>
            </div>
        </div>
        <div class="row ">
            <div class="col ">
                <ProgressBarComponent Header="Files"
                                      Percent="@CloudStat.FilesProgress">
                </ProgressBarComponent>
            </div>
            <div class="col">
                <ProgressBarComponent Header="Size"
                                      Percent="@CloudStat.SizeProgress">
                </ProgressBarComponent>
            </div>
        </div>
        <div class="row ">
            <div class="col">
                <FolderStatComponent Header="Local"
                                     FilesCount="@LocalStat.FilesCount"
                                     FoldersCount="@LocalStat.FoldersCount"
                                     TotalSize="@LocalStat.TotalSize">
                </FolderStatComponent>
            </div>
            <div class="col">
                <FolderStatComponent Header="Cloud"
                                     FilesCount="@CloudStat.FilesCount"
                                     FoldersCount="@CloudStat.FoldersCount"
                                     TotalSize="@CloudStat.TotalSize">
                </FolderStatComponent>
            </div>
            <div class="col">
                <SpeedComponent Header="Upload Progress"
                                TimeSpentSec="@CloudStat.TimeSpentSec"
                                FinishInSec="@CloudStat.FinishInSec">
                </SpeedComponent>
            </div>
        </div>
    </div>
}


@code {
    private HubConnection? hubConnection;

    private string FirstName { get; set; }
    private string LastName { get; set; }
    private string RealName { get; set; }
    private string DisplayName { get; set; }

    private readonly ContentFlowStatistic LocalStat = new();
    private readonly ContentFlowStatistic CloudStat = new();

    protected override async Task OnInitializedAsync()
    {
        await ConfigureHubs();

        if (StateRoot.Authenticated)
        {
            await FillProfileData();
        }

        await base.OnInitializedAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private async Task ConfigureHubs()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri(RealtimeUpdatesHub.HubEndpoint))
            .Build();

        hubConnection.On<string>(RealtimeUpdatesHub.ReceiveLocalFileSystemStatInfo, LocalFileSystemStatInfo_Receive);
        hubConnection.On<string>(RealtimeUpdatesHub.ReceiveCloudFileSystemStatInfo, CloudFileSystemStatInfo_Receive);
        hubConnection.On<string>(RealtimeUpdatesHub.ReceiveExceptionOrConflicts, Exceptions_Receive);

        await hubConnection.StartAsync();
    }

    private async Task Exceptions_Receive(string data)
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task LocalFileSystemStatInfo_Receive(string data)
    {
        var statistic = JsonSerializer.Deserialize<ContentFlowStatistic>(data);

        if (statistic != null)
        {
            LocalStat.FilesCount = statistic.FilesCount;
            LocalStat.FoldersCount = statistic.FoldersCount;
            LocalStat.TotalSize = statistic.TotalSize;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task CloudFileSystemStatInfo_Receive(string data)
    {
        var statistic = JsonSerializer.Deserialize<ContentFlowStatistic>(data);

        if (statistic != null)
        {
            CloudStat.FilesCount = statistic.FilesCount;
            CloudStat.FoldersCount = statistic.FoldersCount;
            CloudStat.TotalSize = statistic.TotalSize;

            CloudStat.FilesProgress = statistic.FilesProgress;
            CloudStat.SizeProgress = statistic.SizeProgress;
            
            CloudStat.FinishInSec = statistic.FinishInSec;
            CloudStat.TimeSpentSec = statistic.TimeSpentSec;
            
            CloudStat.SpeedBytesPerSec = statistic.SpeedBytesPerSec;
            CloudStat.SpeedFilesPerSec = statistic.SpeedFilesPerSec;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task FillProfileData()
    {
        var profile = await ProfileReader.ReadSingleAsync(CancellationToken.None, StateRoot.SecurityTokens);

        FirstName = profile.first_name;
        LastName = profile.last_name;
        RealName = profile.real_name;
        DisplayName = profile.display_name;
    }

    private async Task Start()
    {
        await BackgroundProcess.StartAsync();
    }

    private async Task Stop()
    {
        await BackgroundProcess.StopAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}